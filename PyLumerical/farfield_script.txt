# setup downsampling for far field projections
farfieldsettings("override near field mesh",true);
near_points = %near field points per wavelength%;
if(near_points < 2) {
    ?"Warning, you can't set near field points per wavelength to less than 2";
    near_points = 2;
}
if(near_points > 10) {
    ?"Warning, you can't set near field points per wavelength to more than 10";
    near_points = 10;
}
farfieldsettings("near field samples per wavelength",near_points);

##############################################
# automatically unfold field data if symmetry BC is applied
# collect power transmission data
if (havedata("x1", "f")) {
  symm_x = 0;
  Tx1 = -transmission("x1");
} else {
  xtemp = getdata("y2", "x");
  ztemp = getdata("y2", "z");
  Eztemp = pinch(getdata("y2", "Ez"));
  
  Ez2mid = sum(Eztemp(round(length(xtemp)/2), 1:length(ztemp))^2);
  if (Ez2mid != 0) {
    symm_x = 1;
  } else {
    symm_x = -1;
  }
  Tx1 = transmission("x2");
}

if (havedata("y1", "f")) {
  symm_y = 0;
  Ty1 = -transmission("y1");
} else {
  ytemp = getdata("x2", "y");
  ztemp = getdata("x2", "z");
  Eztemp = pinch(getdata("x2", "Ez"));
  
  Ez2mid = sum(Eztemp(round(length(ytemp)/2), 1:length(ztemp))^2);
  if (Ez2mid != 0) {
    symm_y = 1;
  } else {
    symm_y = -1;
  }
  Ty1 = transmission("y2");
}
if(include_z_min_boundary) {
    if (havedata("z1", "f")) {
        symm_z = 0;
        Tz1 = -transmission("z1");
    } else {
        xtemp = getdata("y2", "x");
        ztemp = getdata("y2", "z");
        Eytemp = pinch(getdata("y2", "Ey"));
        
        Ey2mid = sum(Eytemp(1:length(xtemp), round(length(ztemp)/2))^2);
        if (Ey2mid != 0) {
            symm_z = 1;
        } else {
            symm_z = -1;
        }
        Tz1 = transmission("z2");
    }
} else {
    Tz1 = 0;
}
f = getdata("x2","f");   # get freqency data
Tx2 = transmission("x2"); # transmission data
Ty2 = transmission("y2");
Tz2 = transmission("z2");
Ttotal = Tx1+Tx2+Ty1+Ty2+Tz1+Tz2;
T = matrixdataset("T");
T.addparameter("lambda",c/f,"f",f);
T.addattribute("T",Ttotal);
##############################################

##############################################
# Identify the closest wavelength to target:
if(!%project all wavelengths%) {
    target_wavelength = %target wavelength%;
    i_target = find(f,c/target_wavelength);
    ?"Target wavelength = " + num2str(target_wavelength);
    ?"Wavelength used = " + num2str(c/f(i_target));
    f = f(i_target);
} else {
    i_target = 1:length(f);
    ?"Calculating far field of all wavelengths";
}
##############################################

##############################################
# define the theta and phi grid
theta = linspace(%theta min%,%theta max%,%N theta%)*pi/180; # user-modifiable in the Variables tab
phi = linspace(0,180,%N phi per half%)*pi/180; # user-modifiable in the Variables tab
if(almostequal(phi(1)+2*pi,phi(end))) {
    phi = phi(1:end-1);
    wrap_phi = true;
} else {
    wrap_phi = false;
}
nt = length(theta);
np = length(phi);
nf = length(f);
Theta = meshgridx(theta,phi);
Phi = meshgridy(theta,phi);

x = sin(Theta)*cos(Phi);
y = sin(Theta)*sin(Phi);
z = cos(Theta);

##############################################
# project from all monitors, using symmetry/anti-symmetry where appropriate
if (havedata("z2","Ex")) { # have z data, 3D simulation
##############################################
# Angular distribution calculation for a 3D simulation begins

    npts = length(Phi);

    ######## x-y plane (phi=0 corresponds to the direction (0,1,0))
    ?"    Projecting";

    # Calculate far field by summing contribution from each monitor
    temp = farfieldexact("x2",x,y,z,i_target) + farfieldexact("y2",x,y,z,i_target) + farfieldexact("z2",x,y,z,i_target);
    shape = [npts,3,nf]; # deal with extra dimension not included if nf=1    
    temp = reshape(temp,shape);  
    if(havedata("x1")){
      temp = temp - reshape(farfieldexact("x1",x,y,z,i_target),shape);
    }else{
      temp2 = reshape(farfieldexact("x2",-x,y,z,i_target),shape);
      s = symm_x*[1,-1,-1];
      temp2(1:npts,1,:) = s(1)*temp2(1:npts,1,:);
      temp2(1:npts,2,:) = s(2)*temp2(1:npts,2,:);
      temp2(1:npts,3,:) = s(3)*temp2(1:npts,3,:);
      temp = temp - temp2;
    }
    if(havedata("y1")){
      temp = temp - reshape(farfieldexact("y1",x,y,z,i_target),shape);
    }else{
      temp2 = reshape(farfieldexact("y2",x,-y,z,i_target),shape);
      s = symm_y*[-1,1,-1];  	
      temp2(1:npts,1,:) = s(1)*temp2(1:npts,1,:);
      temp2(1:npts,2,:) = s(2)*temp2(1:npts,2,:);
      temp2(1:npts,3,:) = s(3)*temp2(1:npts,3,:);
      temp = temp - temp2;
    }
    if(include_z_min_boundary) {
        if(havedata("z1")){
          temp = temp - reshape(farfieldexact("z1",x,y,z,i_target),shape);
        }else{
            temp2 = reshape(farfieldexact("z2",x,y,-z,i_target),shape);
            s = symm_z*[-1,-1,1];
            temp2(1:npts,1,:) = s(1)*temp2(1:npts,1,:);
            temp2(1:npts,2,:) = s(2)*temp2(1:npts,2,:);
            temp2(1:npts,3,:) = s(3)*temp2(1:npts,3,:);
            temp = temp - temp2;
        }
    }
    Ex = temp(1:length(Phi),1,:);
    Ey = temp(1:length(Phi),2,:);
    Ez = temp(1:length(Phi),3,:);
    E2temp = reshape( abs(Ex)^2+abs(Ey)^2+abs(Ez)^2, [nt, np, nf] );
    
    # reconstruct other quadrants
    phi = linspace(0,360,2*np-1)*pi/180;
    E2 = matrix(nt,2*np-1,nf);
    E2(:,1:np,:) = E2temp;
    E2(:,(np+1):(2*np-1),:) = E2temp(:,(np-1):-1:1,:);
    #image(theta,phi,E2);
    index = getresult("index","index_x");
    index = real(pinch(index(1,1,1,i_target)));
    # calculate Poynting vector, normalize to sourcepower
    P = E2 * sqrt(eps0/mu0) * meshgrid3dz(theta,phi,index/sourcepower(f));
    
    Theta = meshgridx(theta,phi);
    Phi = meshgridy(theta,phi);
    np = length(phi);
    x = sin(Theta)*cos(Phi);
    y = sin(Theta)*sin(Phi);
    z = cos(Theta);
    
} else {
    ?"Error, projection not available for 2D simulations";
    break;
}

##############################################
# construct the connectivity matrix for an unstructured mesh
pos = find( (Theta != theta(end)) & (Phi != phi(end)) );
C = matrix(2*(nt-1)*(np-!wrap_phi),3);
cPos = 1:length(pos);
C(cPos,1) = pos;
C(cPos,2) = pos+1;
C(cPos,3) = pos+1+nt;
if(wrap_phi) {
    posEnd = find( (Theta != theta(end)) & (Phi == phi(end)) );
    cPosEnd = cPos(end) + (1:length(posEnd));
    C(cPosEnd,1) = posEnd;
    C(cPosEnd,2) = posEnd+1;
    C(cPosEnd,3) = posEnd+1+nt-(np*nt);
} 
cPos = cPos + length(pos) + wrap_phi*(nt-1);
C(cPos,1) = pos;
C(cPos,2) = pos+1+nt;
C(cPos,3) = pos+nt;
if(wrap_phi) {
    cPosEnd = cPos(end) + (1:length(posEnd));
    posEnd;
    C(cPosEnd,1) = posEnd;
    C(cPosEnd,2) = posEnd+1+nt-(np*nt);
    C(cPosEnd,3) = posEnd+nt-(np*nt);
} 

# construct a dataset and visualize it
farfield = unstructureddataset("ff",x,y,z,C);
farfield.addparameter("lambda",c/f,"f",f);
farfield.addattribute("P",reshape(P,[nt*np,nf]));
    
# integrate over all phi for symmetric result.
P_vs_theta = matrixdataset("P");
P_vs_theta.addparameter("theta_degrees",theta*180/pi,"theta_radians",theta);
P_vs_theta.addparameter("lambda",c/f,"f",f);
P_vs_theta.addattribute("P",integrate(P,2,phi)/(2*pi));

# add the Purcell factor as a result for the same frequency grid, using dipolepower script command
Purcell = matrixdataset("Purcell");
Purcell.addparameter("lambda",c/f,"f",f);
Purcell.addattribute("purcell",dipolepower(f)/sourcepower(f));

